version: '3'

services:
  api:
    build: .
    container_name: api
    restart: unless-stopped
    command: bash -c "npm run migration:run && npm run seed:up && npm run start:prod"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./images:/app/images
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-H", "Version: 1", "-sf", "http://api:${API_PORT}"]
      interval: 30s
      retries: 100
      start_period: 10s
    env_file:
      - .env

  db:
    image: mysql:8
    container_name: db
    restart: unless-stopped
    command: '--default-authentication-plugin=mysql_native_password'
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "0.0.0.0", "--silent"]
      interval: 30s
      retries: 100
      start_period: 10s
    environment:
      - MYSQL_ROOT_PASSWORD=$DB_PASSWORD
      - MYSQL_DATABASE=$DB_NAME
      - MYSQL_ROOT_HOST=%
      - MYSQL_TCP_PORT=$DB_PORT
    env_file:
      - .env
    volumes:
      - dbdata:/var/lib/mysql

  nginx:
    image: nginx:1.23.4
    container_name: nginx
    restart: unless-stopped
    environment:
      - DOMAIN=myalovitsa.stud.shpp.me
    depends_on:
      api:
        condition: service_healthy
    networks:
      - app-network
      - teamcity-network
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./etc/nginx/templates:/etc/nginx/templates:ro
      - ./etc/letsencrypt:/etc/letsencrypt:ro
      - ./certbot/data:/var/www/certbot

  # certbot:
  #   container_name: certbot
  #   image: certbot/certbot:v2.5.0
  #   depends_on:
  #     nginx:
  #       condition: service_started
  #   volumes:
  #     - ./etc/letsencrypt:/etc/letsencrypt
  #     - ./certbot/data:/var/www/certbot
  #   command: >-
  #            certonly --reinstall --webroot --webroot-path=/var/www/certbot
  #            --email $EMAIL --agree-tos --no-eff-email
  #            -d $DOMAIN
  #   env_file:
  #     - .env

  teamcity-db:
    image: postgres:15
    restart: unless-stopped
    environment:
      - POSTGRES_PASSWORD=teamcity_password
      - POSTGRES_USER=teamcity_user
      - POSTGRES_DB=teamcity_db
      - PG_DATA=/var/lib/postgresql/data
    volumes:
      - ./buildserver_pgdata:/var/lib/postgresql/data
    ports:
      - :5432
    networks:
      - teamcity-network

  teamcity-server:
    container_name: teamcity-server
    image: jetbrains/teamcity-server:2022.10.3
    depends_on:
      nginx:
        condition: service_started
      teamcity-db:
        condition: service_started
    restart: unless-stopped
    ports:
      - 8111:8111
    volumes:
      - teamcity-datadir:/data/teamcity-server/datadir
      - teamcity-logs:/opt/teamcity/logs
    networks:
      - teamcity-network

  teamcity-agent:
    image: jetbrains/teamcity-agent:2022.10.3-linux-sudo
    depends_on:
      nginx:
        condition: service_started
    volumes:
      - teamcity-agent-conf:/data/teamcity_agent/conf
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - SERVER_URL=http://localhost:8111
      - DOCKER_IN_DOCKER=start
    networks:
      - teamcity-network
    env_file:
      - .env


networks:
  app-network:
    driver: bridge
  teamcity-network:
    driver: bridge

volumes:
  dbdata:
  teamcity-agent-conf:
  teamcity-datadir:
  teamcity-logs: